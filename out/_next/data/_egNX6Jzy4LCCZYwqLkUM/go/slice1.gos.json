{"pageProps":{"codeData":{"id":"slice1.gos","codeContent":"package main\n\n\nfunc a() bool {\n    s := []int{8,8}\n    s[1] -= 9\n    k := s[1] == -1\n    return k\n}\n\nfunc f2() {\n    var j int\n    var s = []int{10, 20}\n    var s2 = []int{100, 200}\n    for _, v := range s {\n        j += v\n        for _, v2 := range s2{\n            j += v2\n            for _, v := range s {\n                j += v\n            }\n        }\n    }\n    assert(j == 750)\n}\n\n\nfunc slice_slice() {\n    s := []int{1,2,3,4}\n    s1 := s[:1]\n    assert(len(s1) == 1)\n    assert(cap(s1) == 4)\n\n    s2 := s[1:]\n    assert(len(s2) == 3)\n    assert(cap(s2) == 3)\n\n    s3 := s[1:2:2]\n    assert(s3[0] == 2)\n    assert(len(s3) == 1)\n    assert(cap(s3) == 1)\n\n    s4 := s[1:2:3]\n    assert(cap(s4) == 2)\n\n    // index out of range\n    //s4 = s[1:2:11]\n    //assert(cap(s4) == 10)\n}\n\nfunc append_slice() {\n    m := []byte{1,3}\n    n := []byte{2,4}\n    t := append(m, n...)\n    assert(t[0] == 1)\n    assert(t[2] == 2)\n\n    s := \"what\"\n    s1 := append(m, s...)\n    assert(s1[2] == 'w')\n    assert(s1[3] == 'h')\n    assert(s1[4] == 'a')\n    assert(s1[5] == 't')\n}\n\nfunc copy_slice() {\n    m := []byte{1,2,3,4}\n    n := []byte{66,77}\n    t := m[1:4]\n    count := copy(t, n)\n    assert(count == 2)\n    assert(t[0] == 66)\n    assert(t[1] == 77)\n    assert(t[2] == 4)\n\n    t2 := m[:1]\n    count = copy(t2, n)\n    assert(count == 1)\n     assert(t2[0] == 66)\n    assert(t2[1] == 66)\n    assert(t2[2] == 77)\n\n    count = copy(t2, \"what\")\n    assert(count == 1)\n    assert(t2[0] == 'w')\n    assert(t2[1] == 66)\n}\n\n\n\nfunc copy_no_return() {\n\ts := \"/a\"\n   \tbuf := make([]byte, 3)\n\tcopy(buf, s[:1])\n\tassert(buf[0] == '/')\n }\n\n\nfunc appendToNil() {\n    var a []int\n    b := []int{6,6,6}\n    a = append(a, b...)\n    a[0] = 123\n    assert(a[0] == 123)\n    assert(b[0] == 6)\n}\n\n\n\nfunc main() {\n    var s1 = [][]int{{0},{99},{2}}\n    var s2 = []int{0,100,2}\n    i := s1[1][0] + s2[1] - 1\n    s2[0] = 8\n    j := s2[0]\n    assert(i == 198)\n    assert(j == 8)\n    assert(a())\n\n    f2()\n\n    slice_slice()\n\n    append_slice()\n\n    copy_slice()\n\n    copy_no_return()\n\n    appendToNil()\n}"},"codeIds":[{"params":{"id":"array.gos"}},{"params":{"id":"async.gos"}},{"params":{"id":"basictypes.gos"}},{"params":{"id":"blankid.gos"}},{"params":{"id":"bytes.gos"}},{"params":{"id":"case1.gos"}},{"params":{"id":"channel.gos"}},{"params":{"id":"closure1.gos"}},{"params":{"id":"closure2.gos"}},{"params":{"id":"closure3.gos"}},{"params":{"id":"closure4.gos"}},{"params":{"id":"complex.gos"}},{"params":{"id":"composite.gos"}},{"params":{"id":"conversion.gos"}},{"params":{"id":"declare.gos"}},{"params":{"id":"defer.gos"}},{"params":{"id":"display.gos"}},{"params":{"id":"fmt.gos"}},{"params":{"id":"for.gos"}},{"params":{"id":"func1.gos"}},{"params":{"id":"goto.gos"}},{"params":{"id":"if.gos"}},{"params":{"id":"init_func.gos"}},{"params":{"id":"initorder.gos"}},{"params":{"id":"interface1.gos"}},{"params":{"id":"interface2.gos"}},{"params":{"id":"map1.gos"}},{"params":{"id":"math.gos"}},{"params":{"id":"nil.gos"}},{"params":{"id":"operations.gos"}},{"params":{"id":"path.gos"}},{"params":{"id":"pkg.gos"}},{"params":{"id":"pointer.gos"}},{"params":{"id":"recover.gos"}},{"params":{"id":"reflect.gos"}},{"params":{"id":"select.gos"}},{"params":{"id":"slice1.gos"}},{"params":{"id":"sort.gos"}},{"params":{"id":"strconv.gos"}},{"params":{"id":"strings.gos"}},{"params":{"id":"switch.gos"}},{"params":{"id":"sync_mutex.gos"}},{"params":{"id":"sync_rwmutex.gos"}},{"params":{"id":"time.gos"}},{"params":{"id":"type1.gos"}},{"params":{"id":"typeswitch.gos"}}]},"__N_SSG":true}