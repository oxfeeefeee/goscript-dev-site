{"pageProps":{"codeData":{"id":"conversion.gos","codeContent":"package main\n\nimport \"fmt\"\n\ntype type1 []struct {\n    Field1 string\n    Field2 int\n}\ntype type2 []struct {\n    Field1 string\n    Field2 int\n}\n\n\nfunc main() {\n    \n    i := uint(42.0)\n    f := float64(i)\n    u := uint(f)\n    assert(u == 42)\n    \n    {\n        f2 := float64(-3.25)\n        assert(f2 == -3.25)\n        f3 := float32(f2)\n        assert(f3 == -3.25)\n        i := int(f3)\n        assert(i == -3)\n    }\n    \n    t1 := type1{{\"A\", 1}, {\"B\", 2}}\n    t2 := type2(t1)\n    assert(t2[1].Field2 == 2)\n    \n\n    s1 := string(100)\n    assert(s1 == \"d\")\n    fmt.Println(s1)\n\n    s2 := string([]rune{100, 101})\n    assert(s2 == \"de\")\n    fmt.Println(s2)\n\n    data := []byte{'t','e','s','t'}\n    s3 := string(data)\n    assert(s3 == \"test\")\n    fmt.Println(s3)\n\n    b4 := []byte(\"dHello, 世界\")\n    r4 := []rune(\"dHello, 世界\")\n    assert(b4[0] == 100)\n    assert(r4[0] == 100)\n    s51 := string(b4)\n    s52 := string(r4)\n    assert(s51[0] == 'd')\n    assert(s52[0] == 'd')\n    shijie := \"世界\"\n    assert(s51[8] == shijie[0])\n    assert(s52[9] == shijie[1])\n    fmt.Println(b4, r4, s51, s52)\n\n\n    \n    testNamed()\n    testStruct()\n    testChan()\n}\n\n\ntype Duration int64\n\nfunc testNamed() {\n    var minDuration Duration\n    var i int32 = 4\n\td :=  Duration(i) + minDuration\n    j := Duration(i)\n    assert(j==d)\n} \n\ntype Person struct {\n\tName    string\n\tAddress *struct {\n\t\tStreet string\n\t\tCity   string\n\t}\n}\n\nvar data struct {\n\tName    string `json:\"name\"`\n\tAddress *struct {\n\t\tStreet string `json:\"street\"`\n\t\tCity   string `json:\"city\"`\n\t} `json:\"address\"`\n}\n\n\nfunc testStruct() {\n    var p Person = Person(data)\n\n    var person = (*Person)(&data)  // ignoring tags, the underlying types are identical\n    assert(person != nil)\n    person.Name = \"aaaa\"\n    assert(data.Name == \"aaaa\")\n\n    assert(p.Name == \"\")\n    fmt.Println(p)\n} \n\ntype C chan string\n\nfunc testChan() {\n   var c C = make(C)\n   d := (chan <- string)(c)\n   fmt.Println(d)\n} "},"codeIds":[{"params":{"id":"array.gos"}},{"params":{"id":"async.gos"}},{"params":{"id":"basictypes.gos"}},{"params":{"id":"blankid.gos"}},{"params":{"id":"bytes.gos"}},{"params":{"id":"case1.gos"}},{"params":{"id":"channel.gos"}},{"params":{"id":"closure1.gos"}},{"params":{"id":"closure2.gos"}},{"params":{"id":"closure3.gos"}},{"params":{"id":"closure4.gos"}},{"params":{"id":"complex.gos"}},{"params":{"id":"composite.gos"}},{"params":{"id":"conversion.gos"}},{"params":{"id":"declare.gos"}},{"params":{"id":"defer.gos"}},{"params":{"id":"display.gos"}},{"params":{"id":"fmt.gos"}},{"params":{"id":"for.gos"}},{"params":{"id":"func1.gos"}},{"params":{"id":"goto.gos"}},{"params":{"id":"if.gos"}},{"params":{"id":"init_func.gos"}},{"params":{"id":"initorder.gos"}},{"params":{"id":"interface1.gos"}},{"params":{"id":"interface2.gos"}},{"params":{"id":"map1.gos"}},{"params":{"id":"math.gos"}},{"params":{"id":"nil.gos"}},{"params":{"id":"operations.gos"}},{"params":{"id":"path.gos"}},{"params":{"id":"pkg.gos"}},{"params":{"id":"pointer.gos"}},{"params":{"id":"recover.gos"}},{"params":{"id":"reflect.gos"}},{"params":{"id":"select.gos"}},{"params":{"id":"slice1.gos"}},{"params":{"id":"sort.gos"}},{"params":{"id":"strconv.gos"}},{"params":{"id":"strings.gos"}},{"params":{"id":"switch.gos"}},{"params":{"id":"sync_mutex.gos"}},{"params":{"id":"sync_rwmutex.gos"}},{"params":{"id":"time.gos"}},{"params":{"id":"type1.gos"}},{"params":{"id":"typeswitch.gos"}}]},"__N_SSG":true}