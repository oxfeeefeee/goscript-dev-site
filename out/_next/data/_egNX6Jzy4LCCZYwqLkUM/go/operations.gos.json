{"pageProps":{"codeData":{"id":"operations.gos","codeContent":"package main\n\nimport \"fmt\"\n\n\nfunc shortCircuit() bool {\n    i := 1\n    assert(i == 0)\n    return true\n}\n\nfunc shortCircuit2() BOOL_ {\n    i := 1\n    assert(i == 0)\n    return BOOL_(true)\n}\n\nfunc test1() {\n    var i, j = 80, 8\n    assert( i + j == 88)\n    assert( i - j == 72)\n    assert( i * j == 640)\n    assert( i / j == 10)\n    assert( i % j == 0)\n    var k = i\n    k += j\n    assert(k == i + j)\n    k = i\n    k -= j\n    assert(k == i - j)\n    k = i\n    k *= j\n    assert(k == i * j)\n    k = i\n    k /= j\n    assert(k == i / j)\n    k = i\n    k %= j\n    assert(k == i % j)\n\n    {\n        var i, j = 80.0, 0.1\n        assert( i + j == 80.1)\n        assert( i - j == 79.9)\n        assert( i * j == 8.0)\n        assert( i / j == 800.0)\n        var k = i\n        k += j\n        assert(k == i + j)\n        k = i\n        k -= j\n        assert(k == i - j)\n        k = i\n        k *= j\n        assert(k == i * j)\n        k = i\n        k /= j\n        assert(k == i / j)\n    }\n\n    {\n        type S1 struct {i, j int}\n        var s S1\n        s.i = 1\n        s.j = 2000000000\n        s.i--\n        s.j++\n        assert(s.i == 0)\n        assert(s.j == 2000000001)\n    }\n\n    {\n        var a = [3]int{1, 8}\n\n        f := uint(2)\n        i := 1 <<f \n        j := 8 >>f\n        a[0] <<= 2  \n        a[1] >>= 2   \n        assert(i == 4)\n        assert(j == 2)\n        assert(a[0] == 4)\n        assert(a[1] == 2)\n        \n    }\n\n    {\n        i := 1\n        i ++\n        assert(i == 2)\n\n        type S1 struct {i, j int}\n        var s S1\n        s.i++\n        assert(s.i == 1)\n\n        p := &i;\n        *p++\n        assert(i == 3)\n    }\n\n    {\n        t := true\n        f := false\n\n        assert(!(t&&f))\n        assert(t&&t)\n        assert(t&&t||f)\n        assert(!(t&&t&&f)) \n\n        assert(t||shortCircuit())\n        assert(!(f&&shortCircuit()))\n    }\n}\n\ntype INT_ int\ntype BOOL_ bool\ntype FLOAT_ float32\n\nfunc test2() {\n    var i, j INT_ = 80, 8\n    fmt.Println(i + j)\n    assert (i != j)\n    assert (i == j + 72)\n    assert( i + j == 88)\n    assert( i - j == 72)\n    assert( i * j == 640)\n    assert( i / j == 10)\n    assert( i % j == 0)\n    var k = i\n    k += j\n    assert(k == i + j)\n    k = i\n    k -= j\n    assert(k == i - j)\n    k = i\n    k *= j\n    assert(k == i * j)\n    k = i\n    k /= j\n    assert(k == i / j)\n    k = i\n    k %= j\n    assert(k == i % j)\n\n    {\n        var i, j FLOAT_ = 80.0, 0.1\n        assert( i + j == 80.1)\n        assert( i - j == 79.9)\n        assert( i * j == 8.0)\n        assert( i / j == 800.0)\n        var k = i\n        k += j\n        assert(k == i + j)\n        k = i\n        k -= j\n        assert(k == i - j)\n        k = i\n        k *= j\n        assert(k == i * j)\n        k = i\n        k /= j\n        assert(k == i / j)\n    }\n\n    {\n        type S1 struct {i, j INT_}\n        var s S1\n        s.i = 1\n        s.j = 2000000000\n        s.i--\n        s.j++\n        assert(s.i == 0)\n        assert(s.j == 2000000001)\n    }\n\n    {\n        var a = [3]INT_{1, 8}\n\n        f := uint(2)\n        i := INT_(1) <<f \n        j := INT_(8) >>f\n        a[0] <<= 2  \n        a[1] >>= 2   \n        assert(i == 4)\n        assert(j == 2)\n        assert(a[0] == 4)\n        assert(a[1] == 2)\n        \n    }\n\n     {\n        i := INT_(1)\n        i ++\n        assert(i == 2)\n\n        type S1 struct {i, j INT_}\n        var s S1\n        s.i++\n        assert(s.i == 1)\n\n        p := &i;\n        *p++\n        assert(i == 3)\n    }\n\n      {\n        var t BOOL_ = true\n        var f BOOL_ = false\n\n        assert(!(t&&f))\n        assert(t&&t)\n        assert(t&&t||f)\n        assert(!(t&&t&&f)) \n\n        assert(t||shortCircuit2())\n        assert(!(f&&shortCircuit2()))\n    }\n}\n\nfunc main() {\n\n\n    test1()\n    test2()\n}"},"codeIds":[{"params":{"id":"array.gos"}},{"params":{"id":"async.gos"}},{"params":{"id":"basictypes.gos"}},{"params":{"id":"blankid.gos"}},{"params":{"id":"bytes.gos"}},{"params":{"id":"case1.gos"}},{"params":{"id":"channel.gos"}},{"params":{"id":"closure1.gos"}},{"params":{"id":"closure2.gos"}},{"params":{"id":"closure3.gos"}},{"params":{"id":"closure4.gos"}},{"params":{"id":"complex.gos"}},{"params":{"id":"composite.gos"}},{"params":{"id":"conversion.gos"}},{"params":{"id":"declare.gos"}},{"params":{"id":"defer.gos"}},{"params":{"id":"display.gos"}},{"params":{"id":"fmt.gos"}},{"params":{"id":"for.gos"}},{"params":{"id":"func1.gos"}},{"params":{"id":"goto.gos"}},{"params":{"id":"if.gos"}},{"params":{"id":"init_func.gos"}},{"params":{"id":"initorder.gos"}},{"params":{"id":"interface1.gos"}},{"params":{"id":"interface2.gos"}},{"params":{"id":"map1.gos"}},{"params":{"id":"math.gos"}},{"params":{"id":"nil.gos"}},{"params":{"id":"operations.gos"}},{"params":{"id":"path.gos"}},{"params":{"id":"pkg.gos"}},{"params":{"id":"pointer.gos"}},{"params":{"id":"recover.gos"}},{"params":{"id":"reflect.gos"}},{"params":{"id":"select.gos"}},{"params":{"id":"slice1.gos"}},{"params":{"id":"sort.gos"}},{"params":{"id":"strconv.gos"}},{"params":{"id":"strings.gos"}},{"params":{"id":"switch.gos"}},{"params":{"id":"sync_mutex.gos"}},{"params":{"id":"sync_rwmutex.gos"}},{"params":{"id":"time.gos"}},{"params":{"id":"type1.gos"}},{"params":{"id":"typeswitch.gos"}}]},"__N_SSG":true}