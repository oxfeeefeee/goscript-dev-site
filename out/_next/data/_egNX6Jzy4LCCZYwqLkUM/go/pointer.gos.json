{"pageProps":{"codeData":{"id":"pointer.gos","codeContent":"package main\n\n//import \"math\"\n\ntype Node struct{\n    i int\n    j string\n}\n\nvar pkgVarA = 1\n\nfunc test() {\n    a := 1\n    b := &a\n    *b = 2\n    assert(2 == a)\n\n    f := func() *int {\n        return &a\n    }\n\n    d := f()\n    e := *d\n    assert(a == e)\n\n    var n, n2 Node\n    n.i = 1\n    n2.i = 222\n    m := &n\n    *m = n2\n    assert(n.i == 222)\n    assert(m.i == 222)\n    m.i = 333\n    m.j = \"abc\"\n    assert(n.i == 333)\n    assert(n.j == \"abc\")\n\n    pfield := &n.i\n    *pfield += 1\n    assert(n.i == 334)\n\n    sl1 := []int{1,2}\n    sl2 := sl1\n    assert(sl2[0] == 1) \n    i := 3\n    psl := &sl2[i-3]\n    *psl = 3\n    assert(sl1[0] == 3) \n\n    *psl += 2\n    assert(sl1[0] == 5) \n\n    sl1p := &sl1\n    (*sl1p)[0] = 8\n    assert(sl1[0] == 8)\n\n    *sl1p = []int{111,222}\n    assert(sl1[0] == 111)\n    assert(sl1[1] == 222)\n\n    {\n        sl1 := [2]int{1,2}\n        sl2 := sl1\n        assert(sl2[0] == 1) \n        i := 3\n        psl := &sl2[i-3]\n        *psl = 3\n        assert(sl1[0] == 1) \n        assert(sl2[0] == 3) \n\n        *psl += 2\n        assert(sl2[0] == 5) \n\n        sl1p := &sl1\n        (*sl1p)[0] = 8\n        assert(sl1[0] == 8)\n\n        *sl1p = [2]int{111,222}\n        assert(sl1[0] == 111)\n        assert(sl1[1] == 222)\n\n    }\n\n    var m1 = map[int]int{1:2, 3: 888}\n    m1p := &m1\n    (*m1p)[3] = 88\n    assert(m1[3] == 88)\n\n    {\n        var d = &pkgVarA\n        *d = 2\n        assert(pkgVarA == 2)\n\n        /*\n        var e = &math.PI\n        assert(math.V1 == 1)\n        *e = 2\n        assert(math.V1 == 2)\n        */\n    }\n}\n\n\nfunc ret() *int {\n    i := 666\n    return &i\n}\n\n\nfunc ret2() (*int, *int) {\n    i := 666\n    return &i, &i\n}\n\n\nfunc test_ret2() {\n    i, j := ret2()\n    *i = 888\n    assert(*j == 888)\n}\n\n\nfunc main() {\n    a := 1\n    b := &a\n    assert(*b + 1 == 2)\n\n    assert(*ret() + 1 == 667)\n\n    test()\n\n    test_ret2()\n}"},"codeIds":[{"params":{"id":"array.gos"}},{"params":{"id":"async.gos"}},{"params":{"id":"basictypes.gos"}},{"params":{"id":"blankid.gos"}},{"params":{"id":"bytes.gos"}},{"params":{"id":"case1.gos"}},{"params":{"id":"channel.gos"}},{"params":{"id":"closure1.gos"}},{"params":{"id":"closure2.gos"}},{"params":{"id":"closure3.gos"}},{"params":{"id":"closure4.gos"}},{"params":{"id":"complex.gos"}},{"params":{"id":"composite.gos"}},{"params":{"id":"conversion.gos"}},{"params":{"id":"declare.gos"}},{"params":{"id":"defer.gos"}},{"params":{"id":"display.gos"}},{"params":{"id":"fmt.gos"}},{"params":{"id":"for.gos"}},{"params":{"id":"func1.gos"}},{"params":{"id":"goto.gos"}},{"params":{"id":"if.gos"}},{"params":{"id":"init_func.gos"}},{"params":{"id":"initorder.gos"}},{"params":{"id":"interface1.gos"}},{"params":{"id":"interface2.gos"}},{"params":{"id":"map1.gos"}},{"params":{"id":"math.gos"}},{"params":{"id":"nil.gos"}},{"params":{"id":"operations.gos"}},{"params":{"id":"path.gos"}},{"params":{"id":"pkg.gos"}},{"params":{"id":"pointer.gos"}},{"params":{"id":"recover.gos"}},{"params":{"id":"reflect.gos"}},{"params":{"id":"select.gos"}},{"params":{"id":"slice1.gos"}},{"params":{"id":"sort.gos"}},{"params":{"id":"strconv.gos"}},{"params":{"id":"strings.gos"}},{"params":{"id":"switch.gos"}},{"params":{"id":"sync_mutex.gos"}},{"params":{"id":"sync_rwmutex.gos"}},{"params":{"id":"time.gos"}},{"params":{"id":"type1.gos"}},{"params":{"id":"typeswitch.gos"}}]},"__N_SSG":true}