{"pageProps":{"codeData":{"id":"type1.gos","codeContent":"package main\n\ntype S1 struct {i int; j int}\n\n\nfunc (s *S1) Inc() int {\n    t := s.i\n    s.i += 66\n    assert(s.i - t == 66)\n    return s.i\n}\n\nfunc (s S1) Inc2() int {\n    assert(s.j == 0)\n    s.j += 1\n    assert(s.j == 1)\n    return s.j\n}\n\nfunc typeAssert() {\n    var i interface{} = \"hello\"\n\n    s, ok := i.(string)\n    assert(ok)\n    assert(s == \"hello\")\n   \n    s1 := i.(string)\n    assert(s1 == \"hello\")\n\n    var j interface{} = \"h\"\n    s, ok = j.(string)\n    assert(ok)\n    assert(s == \"h\")\n}\n\ntype Add func(a int, b int) int\n\n\nfunc main() {\n    type S2 struct {i int}\n\tvar s1 S1\n    //var s2 S2\n\n    s1.Inc()\n    s1.Inc2()\n    assert(s1.i == 66)\n    assert(s1.j == 0)\n\n    p := &s1.i\n    *p = 5\n    assert(s1.i == 5)\n    assert(s1.i == *p)\n\n    f := s1.Inc\n    f()\n    assert(s1.i == 71)\n\n    var afunc Add = func(i int, j int) int { return i + j + 1}\n    d := afunc(s1.i, s1.j)\n    assert(d == s1.i + s1.j + 1)\n\n\n    typeAssert()\n    typeAssert()\n    typeAssert()\n\n}\n// 3, 8, 9\n"},"codeIds":[{"params":{"id":"array.gos"}},{"params":{"id":"async.gos"}},{"params":{"id":"basictypes.gos"}},{"params":{"id":"blankid.gos"}},{"params":{"id":"bytes.gos"}},{"params":{"id":"case1.gos"}},{"params":{"id":"channel.gos"}},{"params":{"id":"closure1.gos"}},{"params":{"id":"closure2.gos"}},{"params":{"id":"closure3.gos"}},{"params":{"id":"closure4.gos"}},{"params":{"id":"complex.gos"}},{"params":{"id":"composite.gos"}},{"params":{"id":"conversion.gos"}},{"params":{"id":"declare.gos"}},{"params":{"id":"defer.gos"}},{"params":{"id":"display.gos"}},{"params":{"id":"fmt.gos"}},{"params":{"id":"for.gos"}},{"params":{"id":"func1.gos"}},{"params":{"id":"goto.gos"}},{"params":{"id":"if.gos"}},{"params":{"id":"init_func.gos"}},{"params":{"id":"initorder.gos"}},{"params":{"id":"interface1.gos"}},{"params":{"id":"interface2.gos"}},{"params":{"id":"map1.gos"}},{"params":{"id":"math.gos"}},{"params":{"id":"nil.gos"}},{"params":{"id":"operations.gos"}},{"params":{"id":"path.gos"}},{"params":{"id":"pkg.gos"}},{"params":{"id":"pointer.gos"}},{"params":{"id":"recover.gos"}},{"params":{"id":"reflect.gos"}},{"params":{"id":"select.gos"}},{"params":{"id":"slice1.gos"}},{"params":{"id":"sort.gos"}},{"params":{"id":"strconv.gos"}},{"params":{"id":"strings.gos"}},{"params":{"id":"switch.gos"}},{"params":{"id":"sync_mutex.gos"}},{"params":{"id":"sync_rwmutex.gos"}},{"params":{"id":"time.gos"}},{"params":{"id":"type1.gos"}},{"params":{"id":"typeswitch.gos"}}]},"__N_SSG":true}