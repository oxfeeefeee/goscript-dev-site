{"pageProps":{"codeData":{"id":"interface1.gos","codeContent":"package main\n\n\ntype geometry interface {\n    area() float64\n    perim() float64\n}\n\n\ntype rect struct {\n    width, height float64\n}\n\nfunc (r rect) perim() float64 {\n    return 2*r.width + 2*r.height\n}\n\nfunc (r rect) area() float64 {\n    return r.width * r.height\n}\n\nfunc measure(x geometry) float64 {\n    return x.perim()\n}\n\nfunc measure2(x geometry, f float64, y geometry) float64 {\n    return x.perim() + f + y.perim()\n}\n\nfunc measure3(x geometry, c float64, v... geometry) float64 {\n    total := x.perim() + c\n    for _, g := range v {\n        total += g.perim()\n    }\n    return total\n}\n\nfunc measure4(x geometry, v... float64) float64 {\n    total := x.perim()\n    for _, g := range v {\n        total += g\n    }\n    return total\n}\n\n/*\ntype circle struct {\n    radius float64\n}\n\nfunc (r rect) area() float64 {\n    return r.width * r.height\n}\nfunc (r rect) perim() float64 {\n    return 2*r.width + 2*r.height\n}\n\nfunc (c circle) area() float64 {\n    return c.radius * c.radius\n}\nfunc (c circle) perim() float64 {\n    return 1 * c.radius\n}\n\nfunc measure(g geometry) {\n    assert(g.area() == 1)\n}\n*/\n\nfunc aaa() (int, *rect) {\n    var r rect\n    r2 := &r\n    r.height = 2\n    assert(2 == r2.height)\n    return 1, r2\n}\n\n\nfunc main() {\n\n    var r rect\n    r.height = 8\n    assert(8 == r.height)\n\n    var g geometry\n    f, g := -6, &r\n    assert(f == -6)\n    assert(16 == measure(g))\n\n    f, g = aaa()\n    assert(f == 1)\n    assert(4 == measure(g))\n\n    assert(37 == measure2(r, 5, r))\n\n    assert(16 * 3 + 5 == 53)\n\n    //measure3(r, 2, r, r, r)\n    assert(53 == measure3(r, 5, r, r))\n\n    assert(30 == measure4(r, 2, 3,4,5))\n\n    /*\n    r := rect{width: 1, height: 1}\n    c := circle{radius: 1}\n\n    measure(r)\n    measure(c)\n    */\n}"},"codeIds":[{"params":{"id":"array.gos"}},{"params":{"id":"async.gos"}},{"params":{"id":"basictypes.gos"}},{"params":{"id":"blankid.gos"}},{"params":{"id":"bytes.gos"}},{"params":{"id":"case1.gos"}},{"params":{"id":"channel.gos"}},{"params":{"id":"closure1.gos"}},{"params":{"id":"closure2.gos"}},{"params":{"id":"closure3.gos"}},{"params":{"id":"closure4.gos"}},{"params":{"id":"complex.gos"}},{"params":{"id":"composite.gos"}},{"params":{"id":"conversion.gos"}},{"params":{"id":"declare.gos"}},{"params":{"id":"defer.gos"}},{"params":{"id":"display.gos"}},{"params":{"id":"fmt.gos"}},{"params":{"id":"for.gos"}},{"params":{"id":"func1.gos"}},{"params":{"id":"goto.gos"}},{"params":{"id":"if.gos"}},{"params":{"id":"init_func.gos"}},{"params":{"id":"initorder.gos"}},{"params":{"id":"interface1.gos"}},{"params":{"id":"interface2.gos"}},{"params":{"id":"map1.gos"}},{"params":{"id":"math.gos"}},{"params":{"id":"nil.gos"}},{"params":{"id":"operations.gos"}},{"params":{"id":"path.gos"}},{"params":{"id":"pkg.gos"}},{"params":{"id":"pointer.gos"}},{"params":{"id":"recover.gos"}},{"params":{"id":"reflect.gos"}},{"params":{"id":"select.gos"}},{"params":{"id":"slice1.gos"}},{"params":{"id":"sort.gos"}},{"params":{"id":"strconv.gos"}},{"params":{"id":"strings.gos"}},{"params":{"id":"switch.gos"}},{"params":{"id":"sync_mutex.gos"}},{"params":{"id":"sync_rwmutex.gos"}},{"params":{"id":"time.gos"}},{"params":{"id":"type1.gos"}},{"params":{"id":"typeswitch.gos"}}]},"__N_SSG":true}