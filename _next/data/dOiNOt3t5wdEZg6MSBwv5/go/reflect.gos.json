{"pageProps":{"codeData":{"id":"reflect.gos","codeContent":"package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\n\ntype AAA int\n\nvar i = 222\n\ntype Bbb struct {\n    A string\n    B int\n    C int\n    D bool\n}\n\ntype Ccc struct {\n    I int\n    I8 int8\n    I16 int16\n    I32 int32\n    I64 int64\n    U uint\n    U8 uint8\n    U16 uint16\n    U32 uint32\n    U64 uint64\n    F32 float32\n    F64 float64\n}\n\nfunc get() AAA {\n    return AAA(i)\n}\n\n\nfunc get2() AAA {\n    return AAA(6*3)\n}\n\nfunc testBytes() {\n    a := []byte{111,112,113}\n    v := reflect.ValueOf(a);\n    b := v.Bytes()\n    assert(a[0] == b[0])\n    assert(a[1] == b[1])\n    assert(a[2] == b[2])\n}\n\nfunc testValueElem() {\n    t := 8\n    i := &t\n    v := reflect.ValueOf(i)\n    re := v.Elem()\n    fmt.Println(v, re)\n}\n\nfunc testField() {\n    b := Bbb{\"xxx\", 123, 0, false}\n    v := reflect.ValueOf(b)\n    assert(v.NumField() == 4)\n   // assert(v.Field(1).Int() == 123)\n    fmt.Println(v, v.Field(1).Int())\n}\n\nfunc testVals() {\n    var i int16 = 555\n    assert(reflect.ValueOf(i).Int() == 555)\n\n    var j uint32 = 666\n    assert(reflect.ValueOf(j).Uint() == 666)\n\n    var k float32 = 3.5\n    assert(reflect.ValueOf(k).Float() == 3.5)\n}\n\nfunc testIndex() {\n    a := []int{23,34,56}\n    v := reflect.ValueOf(a)  \n    assert(v.Index(1).Int() == 34)\n\n    b := \"abcd\"\n    v = reflect.ValueOf(b)  \n    assert(v.Index(1).Uint() == 'b')\n\n    c := [3]int{23,34,56}\n    v = reflect.ValueOf(c)  \n    assert(v.Index(2).Int() == 56)\n    \n}\n\nfunc testIsNil() {\n    var m map[int]string\n    var s []string\n    assert(reflect.ValueOf(m).IsNil())\n    assert(reflect.ValueOf(s).IsNil())\n}\n\n\nfunc testIsValid() {\n    var m map[int]string\n    v := reflect.ValueOf(m)\n    var v1 reflect.Value\n    assert(v.IsValid())\n    assert(!v1.IsValid())\n}\n\nfunc testLen() {\n    m := map[int]string{1:\"a\"}\n    var s []int\n    v := reflect.ValueOf(m)\n    v1 := reflect.ValueOf(s)\n    assert(v.Len() == 1)\n    assert(v1.Len() == 0)\n}\n\nfunc testMapIter() {\n    m := map[int]string{66:\"a\"}\n    v := reflect.ValueOf(m)\n    iter := v.MapRange()\n    assert(iter.Next())\n    assert(iter.Key().Int() == 66)\n    assert(!iter.Next())\n}\n\nfunc testPointer() {\n    var i uintptr\n\ti <<= 1\n\ti += 1\n\ti <<= 3\n\tvar j int\n\tj = 9\n\ti = (uintptr)(j)\n    f := float32(i)\n    assert(f == 9)\n\n    fmt.Println(reflect.ValueOf(i).Pointer())\n}\n\nfunc testSet() {\n    assert(!reflect.ValueOf(\"\").CanSet())\n\n    var bbb Bbb\n    bv := reflect.ValueOf(bbb);\n    bv0 := bv.Field(0)\n    bv2 := bv.Field(2)    \n    bv3 := bv.Field(3)    \n    assert(bv0.CanSet())\n    assert(bv2.CanSet())\n    assert(bv3.CanSet())\n    assert(!bv3.Bool())\n    bv3.SetBool(true)\n    assert(bv3.Bool())\n    \n    a := []int{23,34,56}\n    v := reflect.ValueOf(a)   \n    v1 := v.Index(1)\n    assert(v1.CanSet())\n    \n    v1.Set(reflect.ValueOf(888))\n    assert(v.Index(1).Int() == 888)\n\n    bv0.SetString(\"kkk\")\n    assert(bbb.A == \"\")\n    \n    {\n        b := new([]byte)\n        v := reflect.ValueOf(b).Elem()\n        v.SetBytes([]byte{1,239,3})\n        assert((*b)[1] == 239)\n    }\n\n    {/*\n        native := ffi(ffiReflect, \"reflect\")\n        i := 1\n        j := 2\n        pi := native.value_of(i)\n        ppi := native.value_of(pi)\n        pj := native.value_of(j)\n        native.set_pointer(ppi, pj)\n    */\n    }\n\n    {\n        var ccc Ccc\n        v := reflect.ValueOf(ccc);\n        for i := 0; i < 5; i++ {\n            cf := v.Field(i)\n            cf.SetInt(8)\n            assert(cf.Int() == 8)\n        }\n        for i := 5; i < 10; i++ {\n            cf := v.Field(i)\n            cf.SetUint(9)\n            assert(cf.Uint() == 9)\n        }\n        for i := 10; i < 12; i++ {\n            cf := v.Field(i)\n            cf.SetFloat(10)\n            assert(cf.Float() == 10)\n        }\n        \n        var i interface{} = ccc.I16\n        _, ok := i.(int16)\n        assert(ok)\n        i = ccc.U32\n        _, ok = i.(uint32)\n        assert(ok)\n        i = ccc.F32\n        _, ok = i.(float32)\n        assert(ok)\n    }\n\n}\n\n\nfunc main() {\n    \n    testBytes()\n    \n    testValueElem()\n    \n    testField()\n\n    testVals()\n\n    testIndex()\n\n    testIsNil()\n\n    testIsValid()\n\n    testLen()\n\n    testMapIter()\n    \n    testPointer()\n    \n    testSet() \n\n    \n    //i := reflect.TypeOf(get)\n    //j := reflect.TypeOf(get2)\n    //assert(i == j)\n    //fmt.Println(get2(), get(), i, j, i == j, reflect.ValueOf(get).Pointer())\n    \n}"},"codeIds":[{"params":{"id":"array.gos"}},{"params":{"id":"async.gos"}},{"params":{"id":"basictypes.gos"}},{"params":{"id":"blankid.gos"}},{"params":{"id":"bytes.gos"}},{"params":{"id":"case1.gos"}},{"params":{"id":"channel.gos"}},{"params":{"id":"closure1.gos"}},{"params":{"id":"closure2.gos"}},{"params":{"id":"closure3.gos"}},{"params":{"id":"closure4.gos"}},{"params":{"id":"complex.gos"}},{"params":{"id":"composite.gos"}},{"params":{"id":"conversion.gos"}},{"params":{"id":"declare.gos"}},{"params":{"id":"defer.gos"}},{"params":{"id":"display.gos"}},{"params":{"id":"fmt.gos"}},{"params":{"id":"for.gos"}},{"params":{"id":"func1.gos"}},{"params":{"id":"goto.gos"}},{"params":{"id":"if.gos"}},{"params":{"id":"init_func.gos"}},{"params":{"id":"initorder.gos"}},{"params":{"id":"interface1.gos"}},{"params":{"id":"interface2.gos"}},{"params":{"id":"map1.gos"}},{"params":{"id":"math.gos"}},{"params":{"id":"nil.gos"}},{"params":{"id":"operations.gos"}},{"params":{"id":"path.gos"}},{"params":{"id":"pkg.gos"}},{"params":{"id":"pointer.gos"}},{"params":{"id":"recover.gos"}},{"params":{"id":"reflect.gos"}},{"params":{"id":"select.gos"}},{"params":{"id":"slice1.gos"}},{"params":{"id":"sort.gos"}},{"params":{"id":"strconv.gos"}},{"params":{"id":"strings.gos"}},{"params":{"id":"switch.gos"}},{"params":{"id":"sync_mutex.gos"}},{"params":{"id":"sync_rwmutex.gos"}},{"params":{"id":"time.gos"}},{"params":{"id":"type1.gos"}},{"params":{"id":"typeswitch.gos"}}]},"__N_SSG":true}