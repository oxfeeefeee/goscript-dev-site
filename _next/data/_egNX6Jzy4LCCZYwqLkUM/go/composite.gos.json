{"pageProps":{"codeData":{"id":"composite.gos","codeContent":"package main\n\nimport (\n\t\"fmt\"\n)\n\n\ntype Point3D struct { x, y, z int }\ntype Point3Df struct { x, y, z float32 }\n\ntype acceptRange struct {\n\tlo uint8 \n\thi uint8 \n}\n\nvar t = [16]Point3D{{1,2,3},{y:4}}\n\n\nvar acceptRanges = [16]acceptRange{\n\t0: {1, 2},\n\t1: {1, 2},\n\t2: {1, 0x9F},\n\t3: {0x90, 1},\n\t4: {1, 0x8F},\n}\n\n\n\nfunc main() {\n    \n    var p = Point3D{8,9,10}\n    assert(p.x == 8)\n\n    var p2 = Point3D{y:88}\n    assert(p2.y == 88)\n\n    var s = []Point3D{{1,2,3},{y:4}}\n    fmt.Println(s[0].x, s[0].y, s[0].z, s[1].x, s[1].y, s[1].z)\n\n    assert(s[0].z == 3)\n    assert(s[1].y == 4)\n\n    var pf = Point3Df{1.1,20000000000000000000,3}\n    assert(pf.x == 1.1)\n\n    var t2 = []acceptRange{10:{1,1}, {2,2}, 1:{3,3}}\n    fmt.Println(t2)\n    assert(t2[0].lo == 0)\n    assert(t2[1].lo == 3)\n    assert(t2[11].lo == 2)\n    assert(len(t2) == 12)\n\n    var t3 = []acceptRange{1:{1,1}, {2,2}, 10:{3,3}}\n    fmt.Println(t3)\n    assert(t3[0].lo == 0)\n    assert(t3[1].lo == 1)\n    assert(t3[2].lo == 2)\n    assert(len(t3) == 11)\n    \n    \n}\n"},"codeIds":[{"params":{"id":"array.gos"}},{"params":{"id":"async.gos"}},{"params":{"id":"basictypes.gos"}},{"params":{"id":"blankid.gos"}},{"params":{"id":"bytes.gos"}},{"params":{"id":"case1.gos"}},{"params":{"id":"channel.gos"}},{"params":{"id":"closure1.gos"}},{"params":{"id":"closure2.gos"}},{"params":{"id":"closure3.gos"}},{"params":{"id":"closure4.gos"}},{"params":{"id":"complex.gos"}},{"params":{"id":"composite.gos"}},{"params":{"id":"conversion.gos"}},{"params":{"id":"declare.gos"}},{"params":{"id":"defer.gos"}},{"params":{"id":"display.gos"}},{"params":{"id":"fmt.gos"}},{"params":{"id":"for.gos"}},{"params":{"id":"func1.gos"}},{"params":{"id":"goto.gos"}},{"params":{"id":"if.gos"}},{"params":{"id":"init_func.gos"}},{"params":{"id":"initorder.gos"}},{"params":{"id":"interface1.gos"}},{"params":{"id":"interface2.gos"}},{"params":{"id":"map1.gos"}},{"params":{"id":"math.gos"}},{"params":{"id":"nil.gos"}},{"params":{"id":"operations.gos"}},{"params":{"id":"path.gos"}},{"params":{"id":"pkg.gos"}},{"params":{"id":"pointer.gos"}},{"params":{"id":"recover.gos"}},{"params":{"id":"reflect.gos"}},{"params":{"id":"select.gos"}},{"params":{"id":"slice1.gos"}},{"params":{"id":"sort.gos"}},{"params":{"id":"strconv.gos"}},{"params":{"id":"strings.gos"}},{"params":{"id":"switch.gos"}},{"params":{"id":"sync_mutex.gos"}},{"params":{"id":"sync_rwmutex.gos"}},{"params":{"id":"time.gos"}},{"params":{"id":"type1.gos"}},{"params":{"id":"typeswitch.gos"}}]},"__N_SSG":true}